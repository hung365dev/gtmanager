// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Cars;
using Database;
using GoogleFu;
using Teams;
using championship;
using Utils;


namespace Garage
{
	public class BuyCarsScreen : MonoBehaviour
	{
		public GameObject carOnSale;
		public CarLibraryRecord car;
		public GameObject parent;
		public static int currentIndex = 0;

		public Color colorIfCarBetter;
		public Color colorIfCarWorse;


		public UILabel lblDivisionLabel;
		
		public GameObject centerLight;
		public UIButton btnBuyCar;
		private GTCar _carToReplace;
		private CarDetails _carDetailsScreen;
		public BuyCarsScreen ()
		{
		}

		public void init(CarDetails aCarDetailsScreen,GTCar aCarToReplace) {
			GarageManager.REF.interfacePanel.gameObject.SetActive(false);
			
			GarageCameraController camController = GameObject.Find("Main Camera").GetComponent<GarageCameraController>();
			btnBuyCar = GameObject.Find ("BtnBuyCar").GetComponent<UIButton>();
			camController.lookAtThis = GameObject.Find ("GarageCenter");
			GameObject g = GameObject.Find("CameraPathForCarOnSale");
			GameObject lbl = GameObject.Find ("lblDivisionLabel");
			centerLight = GameObject.Find ("Center Car Spotlight");
			lblDivisionLabel = lbl.GetComponent<UILabel>();
			if(g!=null) {
				CameraPath cp = g.GetComponent<CameraPath>();
				cp.enabled = true;
				
				CameraPathAnimator cpa = g.GetComponent<CameraPathAnimator>();
				cpa.enabled = true;
			}
			Lean.LeanTouch.OnFingerSwipe += OnFingerSwipe;
			_carToReplace = aCarToReplace;
			_carDetailsScreen = aCarDetailsScreen;
			GTTeam team = ChampionshipSeason.ACTIVE_SEASON.getUsersTeam();
			int division = ChampionshipSeason.ACTIVE_SEASON.leagueForTeam(team).divisionNumber;
			int i = 0;
			for(i = 0;i<CarDatabase.REF.cars.Count;i++) {
				if(CarDatabase.REF.cars[i].leagueRequired>=division) {
					continue;
				} else {
					
					break;
				}
			}
			i--;
			currentIndex = i;
			showCar(currentIndex);
		}


		public void onBuyThisCar() {
			Debug.Log ("Buying this Car!");
			
			GarageManager.REF.doConversation("TutorialCarBought");
			GTTeam humansTeam = ChampionshipSeason.ACTIVE_SEASON.getUsersTeam();
			
			int cost = CarDatabase.REF.cars[currentIndex].carCost-this._carToReplace.carValue;
			if(cost<=humansTeam.cash) {

				int indexOfCar = humansTeam.indexForCar(_carToReplace);

				_carToReplace.replaceCar(CarDatabase.REF.cars[currentIndex]);
				humansTeam.cash -= cost;
				onGoBackAScreen();
			} else {
				GarageManager.REF.doConversation("NotEnoughCashForCar");
			}
		}
		public void onGoBackAScreen() {
			Debug.Log ("Going back a screen!");
			Destroy(this.gameObject);
			_carDetailsScreen.reInit(this._carToReplace);
		}
		public void OnDestroy() {
			GameObject g = GameObject.Find("CameraPathForCarOnSale");
			if(carOnSale!=null) {
				Destroy(carOnSale.gameObject);
			}
			if(g!=null) {
				CameraPath cp = g.GetComponent<CameraPath>();
				cp.enabled = false;
				
				CameraPathAnimator cpa = g.GetComponent<CameraPathAnimator>();
				cpa.enabled = false;
			}
		}
		public void showCar(int aCarIndex) {
			if(carOnSale!=null) {
				Destroy(carOnSale.gameObject);
				carOnSale = null;
			}
			if(aCarIndex>=CarDatabase.REF.cars.Count) {
				aCarIndex = 0;
			}
			if(aCarIndex<0) {
				aCarIndex = CarDatabase.REF.cars.Count-1;
			}
			currentIndex = aCarIndex;
			car = CarDatabase.REF.cars[aCarIndex];
			GameObject c = car.carPrefab;
			
			parent = GameObject.Find ("GarageManager").transform.FindChild("GarageCenter").gameObject;
			GameObject thisCar = GameObject.Instantiate(c);
			//	thisCar.transform.SetParent(parent.transform);
			thisCar.transform.position = parent.transform.position;
			thisCar.GetComponent<RacingAI>().initSmokes();
			thisCar.GetComponent<RacingAI>().hidePilot();
			SpriteRenderer[] renderers = thisCar.GetComponentsInChildren<SpriteRenderer>();
			for(int i = 0;i<renderers.Length;i++) {			
				Destroy(renderers[i].gameObject);
			}
			GTTeam myTeam = ChampionshipSeason.ACTIVE_SEASON.getUsersTeam();

			if(car.leagueRequired>=ChampionshipSeason.ACTIVE_SEASON.leagueForTeam(myTeam).divisionNumber) {
				
				if((car.upgradeRequired==2&&SaveGameUtils.fullGameOwned==2)||(car.upgradeRequired<2)) {
					this.lblDivisionLabel.gameObject.SetActive(false);
					this.centerLight.gameObject.SetActive(true);
					btnBuyCar.isEnabled = true;
				} else if(car.upgradeRequired==2) {
					
					lblDivisionLabel.text = "Full Game Plus Pack Required";
					this.lblDivisionLabel.gameObject.SetActive(true);
					this.centerLight.gameObject.SetActive(false);
					btnBuyCar.isEnabled = false;
				}
			} else {
				lblDivisionLabel.text = "League "+car.leagueRequired+" Required";
				this.lblDivisionLabel.gameObject.SetActive(true);
				this.centerLight.gameObject.SetActive(false);
				btnBuyCar.isEnabled = false;
				
			}
//thisCar.GetComponent<RacingAI>()
			carOnSale = thisCar;
			deleteIRDSClasses(carOnSale);
			this.GetComponent<CarDetails>().showCar (car);
			this.GetComponent<CarDetails>().compareCarTo(car,_carToReplace,this.colorIfCarBetter,this.colorIfCarWorse);

		}
		public void deleteIRDSClasses(GameObject aObject) {
			
			if(aObject.GetComponent<IRDSCarControllerAI>()!=null) {
				Destroy(aObject.GetComponent<IRDSCarControllerAI>());
			}

			if(aObject.GetComponent<IRDSSoundController>()!=null) {
				Destroy(aObject.GetComponent<IRDSSoundController>());
			}
			if(aObject.GetComponent<IRDSAerodynamicResistance>()!=null) {
				Destroy(aObject.GetComponent<IRDSAerodynamicResistance>());
			}
			if(aObject.GetComponent<IRDSCarDamage>()!=null) {
				Destroy(aObject.GetComponent<IRDSCarDamage>());
			}
			if(aObject.GetComponent<IRDSNavigateTWaypoints>()!=null) {
				Destroy(aObject.GetComponent<IRDSNavigateTWaypoints>());
			}
			if(aObject.GetComponent<IRDSPlayerControls>()!=null) {
				Destroy(aObject.GetComponent<IRDSPlayerControls>());
			}
			if(aObject.GetComponent<IRDSPerCarGUI>()!=null) {
				Destroy(aObject.GetComponent<IRDSPerCarGUI>());
			}
			if(aObject.GetComponent<IRDSDrivetrain>()!=null) {
			//	Destroy(aObject.GetComponent<IRDSDrivetrain>());
			}
			GameObject[] gs = GameObject.FindObjectsOfType<GameObject>();
			for(int i = 0;i<gs.Length;i++) {
				if(gs[i].name.Contains("CurrentWP_")) {
					Destroy(gs[i]);
				}
			}
		}
		public void OnFingerSwipe(Lean.LeanFinger finger)
		{

			// Store the swipe delta in a temp variable
			var swipe = finger.SwipeDelta;
			
			if (swipe.x < -Mathf.Abs(swipe.y))
			{
				Debug.Log ("You swiped left!");
			}
			
			if (swipe.x > Mathf.Abs(swipe.y))
			{
				Debug.Log ("You swiped right!");
			}
			
			if (swipe.y < -Mathf.Abs(swipe.x))
			{
				Debug.Log ("You swiped down!");
				showCar(currentIndex+1);
			}
			
			if (swipe.y > Mathf.Abs(swipe.x))
			{
				Debug.Log ("You swiped up!");
				showCar(currentIndex-1);
			}

		}

		public void OnEnable() {
			
			GarageManager.REF.doConversation("TutorialBuyCar");
		}

		public void OnDisable() {
			centerLight.gameObject.SetActive(true);
			Lean.LeanTouch.OnFingerSwipe -= OnFingerSwipe;
		}
	} 
}

