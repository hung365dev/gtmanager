// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using Database;


namespace Teams
{
	[System.Serializable]
	public class GTTeamWithSponsors : GTTeamWithDrivers
	{
		
		public static Material sponsorMaterial;
		public List<SponsorPlacedRelationshipRecord> currentContracts = new List<SponsorPlacedRelationshipRecord>();
		public List<SponsorRelationshipRecord> sponsorRelationships = new List<SponsorRelationshipRecord>();
		public GTTeamWithSponsors ()
		{
		}

		public void initSponsorRelationships() {
			if(sponsorMaterial==null) {
				sponsorMaterial = (Material) Resources.Load ("Sponsors/SponsorMaterial");
			}
			for(int i = 0;i<SponsorDatabase.REF.sponsors.Count;i++) {
				sponsorRelationships.Add(new SponsorRelationshipRecord(SponsorDatabase.REF.sponsors[i],this.reputation));
			}
		}

		public SponsorInterestInfo interestFromSponsor(SponsorRecord aSponsor) {
			for(int i = 0;i<this.sponsorRelationships.Count;i++) {
				if(sponsorRelationships[i].record==aSponsor) {
					return sponsorRelationships[i].interest;
				}
			}
			return null;
		}
		
		public void addSponsorContract(ESponsorPosition aPosition,SponsorRelationshipRecord aRecord,int aValue,int aRaces) {
			currentContracts.Add(new SponsorPlacedRelationshipRecord(aPosition,aRecord.record,aValue,aRaces));
		}
		
		public SponsorRelationshipRecord sponsorRelationship(SponsorRecord aRecord) {
			for(int i= 0;i<sponsorRelationships.Count;i++) {
				if(sponsorRelationships[i].record==aRecord) {
					return sponsorRelationships[i];
				}
			}
			return null; 
		}
		public SponsorPlacedRelationshipRecord hasSponsorForPlace(ESponsorPosition aPosition) {
			for(int i= 0;i<currentContracts.Count;i++) {
				if(currentContracts[i].position==aPosition) {
					return currentContracts[i];
				}
			}
			return null;
		}
		
		
		public List<SponsorRelationshipRecord> allInterestedSponsors {
			get {
				List<SponsorRelationshipRecord> r = new List<SponsorRelationshipRecord>();
				for(int i = 0;i<this.sponsorRelationships.Count;i++) {
					r.Add(this.sponsorRelationships[i]);
				}
				r.Sort(randSort);  
				return r;
			}
		}
		public int randSort(SponsorRelationshipRecord name1, SponsorRelationshipRecord name2)
		{
			return UnityEngine.Random.Range(-1,1);
		}
		
		protected void findSponsorsForMe() {
			if(this.hasSponsorForPlace(ESponsorPosition.Back)==null) {
				if(allInterestedSponsors.Count>0) {
					addSponsorContract(ESponsorPosition.Back,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				} 
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Bonnet)==null) {
				if(allInterestedSponsors.Count>0) {
					addSponsorContract(ESponsorPosition.Bonnet,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Left)==null) {
				if(allInterestedSponsors.Count>0) {
					addSponsorContract(ESponsorPosition.Left,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Right)==null) {
				if(allInterestedSponsors.Count>0) {
					addSponsorContract(ESponsorPosition.Right,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Roof)==null) {
				if(allInterestedSponsors.Count>0) {
					addSponsorContract(ESponsorPosition.Right,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			
		}

		public void addSponsorPoints(int aPosition) {
			for(int i = 0;i<this.sponsorRelationships.Count;i++) {
				float differenceToDemand = (float) sponsorRelationships[i].record.positionDemanded- (float) aPosition;
				// If positive, we have impressed this sponsor
				// If Negative, we have lost reputation with this sponsor;
				if(differenceToDemand<-8) {
					differenceToDemand = -8;
				}
				if(differenceToDemand>8) {
					differenceToDemand = 8;
				}
				// Multiply by 20 to make it more effective
				for(int j = 0;j<this.drivers.Count;j++) {
					differenceToDemand *= drivers[j].sponsorFriendliness;
				}
				differenceToDemand *= 10;
				sponsorRelationships[i].currentRelationshipValue += Convert.ToInt32(differenceToDemand);
				if(sponsorRelationships[i].currentRelationshipValue<0) { 
					sponsorRelationships[i].currentRelationshipValue = 0;
				}
				if(sponsorRelationships[i].currentRelationshipValue>1000) {
					sponsorRelationships[i].currentRelationshipValue = 1000;
				}
				
			}
		}
		public void applySponsorsToCar(GameObject aGameObject) {
			SpriteRenderer[] sprites = aGameObject.GetComponentsInChildren<SpriteRenderer>();
			for(int i= 0;i<sprites.Length;i++) {
				SponsorPlacedRelationshipRecord rec = null;
				
				switch(sprites[i].name) {
				case("SponsorTop"):
					rec = hasSponsorForPlace(ESponsorPosition.Bonnet);break;
				case("SponsorRoof"):
					rec = hasSponsorForPlace(ESponsorPosition.Roof);break;
				case("SponsorRightSide"):
					rec = hasSponsorForPlace(ESponsorPosition.Right);break;
				case("SponsorLeftSide"):
					rec = hasSponsorForPlace(ESponsorPosition.Left);break;
				case("SponsorBackside"):
					rec = hasSponsorForPlace(ESponsorPosition.Back);break;
				}
				if(rec!=null) {
					sprites[i].sprite = rec.record.logo; 
					sprites[i].material =sponsorMaterial;
				} else 
					sprites[i].sprite = null;
			}
		}

	}
}

