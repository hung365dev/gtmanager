// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Drivers;
using System.Collections.Generic;
using UnityEngine;
using PixelCrushers.DialogueSystem;
using Utils;


namespace Teams
{
	public class GTTeamWithDrivers : GTTeamBase
	{
		public List<DriverRelationshipRecord> driverRelationships = new List<DriverRelationshipRecord>();
		public GTTeamWithDrivers ()
		{
		}


		public void initDriverRelationships() {
			for(int i = 0;i<GTDriver.allDrivers.Count;i++) {
				driverRelationships.Add(new DriverRelationshipRecord(GTDriver.allDrivers[i],this.reputation));
			}
		}

		public override void FromString(string aString) {
			string[] split = aString.Split(new char[] {'|'});
			base.FromString(split[0]);
			string relationships = Base64.Base64Decode(split[1]);
			string[] relationshipsSplit = relationships.Split(new char[] {'%'});
			for(int i = 0;i<relationshipsSplit.Length;i++) {
				string[] thisSplit = relationshipsSplit[i].Split(new char[] {'|'});
				driverRelationships.Add(new DriverRelationshipRecord(thisSplit[0],Convert.ToInt32(thisSplit[1])));
			}
		}
		
		public override string ToString ()
		{
			return base.ToString()+"|"+driverRelationshipsToString();
		}

		public string driverRelationshipsToString() {
			string s = "";
			for(int i = 0;i<driverRelationships.Count;i++) {
				s+=driverRelationships[i].record.id+"|"+driverRelationships[i].currentRelationshipValue+"%";
			}
			return Base64.Base64Encode(s);
		}
		public void endRaceActions() {
			DialogueLua.SetVariable("ContractExpiryNote","");
			DialogueLua.SetVariable("ContractExpiryForceDriversScreen",false);
			if(drivers[0].racesRemainingOnContract()<3&&drivers[1].racesRemainingOnContract()<3) {
				
				DialogueLua.SetVariable("ContractExpiryNote","Both of your drivers contracts are about to expire! You must renew their contracts or sign new drivers!");
				
				
			} else if(drivers[0].racesRemainingOnContract()<3) {
				DialogueLua.SetVariable("ContractExpiryNote",drivers[0].name+"'s contract is due to expire shortly. Renew their contract or sign a new driver.");
				
			} else if(drivers[1].racesRemainingOnContract()<3) {
				DialogueLua.SetVariable("ContractExpiryNote",drivers[1].name+"'s contract is due to expire shortly. Renew their contract or sign a new driver.");
			}

			if(drivers[0].racesRemainingOnContract()==0||drivers[1].racesRemainingOnContract()==0)
				DialogueLua.SetVariable("ContractExpiryForceDriversScreen",true);

			if(DialogueLua.GetVariable("ContractExpiryNote").AsString!="") {
				GarageManager.REF.doConversation("ContractExpiryNote");
			}
		}
		public DriverRelationshipRecord relationshipWithDriver(GTDriver aDriver) {
			for(int i = 0;i<driverRelationships.Count;i++) {
				Debug.Log(driverRelationships[i].record.name+" - "+aDriver.name);
				if(driverRelationships[i].record==aDriver) {
					return driverRelationships[i]; 
				}
			}
			return null;
		}
		public void addDriverPoints(int aPosition) {
			for(int i = 0;i<this.driverRelationships.Count;i++) {
				float differenceToDemand = (float) driverRelationships[i].record.positionDemanded- (float) aPosition;
				// If positive, we have impressed this sponsor
				// If Negative, we have lost reputation with this sponsor;
				if(differenceToDemand<-8) {
					differenceToDemand = -8;
				} 
				if(differenceToDemand>8) {
					differenceToDemand = 8;
				}
				// Multiply by 20 to make it more effective
				for(int j = 0;j<this.drivers.Count;j++) {
					differenceToDemand *= drivers[j].sponsorFriendliness;
				}
				differenceToDemand *= 10;
				driverRelationships[i].currentRelationshipValue += Convert.ToInt32(differenceToDemand);
				if(driverRelationships[i].currentRelationshipValue<0) { 
					driverRelationships[i].currentRelationshipValue = 0;
				}
				if(driverRelationships[i].currentRelationshipValue>1000) {
					driverRelationships[i].currentRelationshipValue = 1000;
				}
				
			}
		}

		public void initDriver(GTDriver aDriver) {
			this.drivers.Add(aDriver);
			aDriver.contract.team = (GTTeam) this;
			aDriver.contract.remainingOnContract = 1;
		}
	}
}

