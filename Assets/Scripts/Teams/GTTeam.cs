// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Drivers;
using Cars;
using Database;
using UnityEngine;
using championship;
using System.Collections.Generic;
using PixelCrushers.DialogueSystem;


namespace Teams
{
	[System.Serializable]
	public class GTTeam
	{
		public List<GTDriver> drivers = new List<GTDriver>();
		public List<GTCar> cars = new List<GTCar>();
		public Color teamColor;
		public bool humanControlled = false;
		public string teamName;
		public int reputation;
		public int seasonPoints = 0;
		public int seasonWins = 0;
		public static Material sponsorMaterial;
		public int cash = 200000;
		public static string HUMANS_DEBUG_TEAM = "Test Pilots";
		
		
		public List<SponsorPlacedRelationshipRecord> currentContracts = new List<SponsorPlacedRelationshipRecord>();
		public List<SponsorRelationshipRecord> sponsorRelationships = new List<SponsorRelationshipRecord>();
		public GTTeam (TeamDataRecord aTeamDataRecord) {
			cars.Add(aTeamDataRecord.carA);
			cars.Add(aTeamDataRecord.carB);

			drivers.Add(aTeamDataRecord.driverA);
			drivers.Add(aTeamDataRecord.driverB);
			
			reputation = aTeamDataRecord.reputation;
			teamColor = aTeamDataRecord.teamColor;
			teamName = aTeamDataRecord.name;

			if(teamName==HUMANS_DEBUG_TEAM) {
				humanControlled = true;
				DialogueLua.SetVariable("PlayersDriver1",drivers[0].name);
			} else {
			
			}
			
			if(sponsorMaterial==null) {
				sponsorMaterial = (Material) Resources.Load ("Sponsors/SponsorMaterial");
			}
			for(int i = 0;i<SponsorDatabase.REF.sponsors.Count;i++) {
				sponsorRelationships.Add(new SponsorRelationshipRecord(SponsorDatabase.REF.sponsors[i],this.reputation));
			}
		}
		
		public void addContract(ESponsorPosition aPosition,SponsorRelationshipRecord aRecord,int aValue,int aRaces) {
			currentContracts.Add(new SponsorPlacedRelationshipRecord(aPosition,aRecord.record,aValue,aRaces));
		}
		
		public SponsorRelationshipRecord sponsorRelationship(SponsorRecord aRecord) {
			for(int i= 0;i<sponsorRelationships.Count;i++) {
				if(sponsorRelationships[i].record==aRecord) {
					return sponsorRelationships[i];
				}
			}
			return null; 
		}
		public SponsorPlacedRelationshipRecord hasSponsorForPlace(ESponsorPosition aPosition) {
			for(int i= 0;i<currentContracts.Count;i++) {
				if(currentContracts[i].position==aPosition) {
					return currentContracts[i];
				}
			}
			return null;
		}
		
		public void applySponsorsToCar(GameObject aGameObject) {
			SpriteRenderer[] sprites = aGameObject.GetComponentsInChildren<SpriteRenderer>();
			for(int i= 0;i<sprites.Length;i++) {
				SponsorPlacedRelationshipRecord rec = null;
				
				switch(sprites[i].name) {
					case("SponsorTop"):
						rec = hasSponsorForPlace(ESponsorPosition.Bonnet);break;
					case("SponsorRoof"):
						rec = hasSponsorForPlace(ESponsorPosition.Roof);break;
					case("SponsorRightSide"):
						rec = hasSponsorForPlace(ESponsorPosition.Right);break;
					case("SponsorLeftSide"):
						rec = hasSponsorForPlace(ESponsorPosition.Left);break;
					case("SponsorBackside"):
						rec = hasSponsorForPlace(ESponsorPosition.Back);break;
				}
				if(rec!=null) {
					sprites[i].sprite = rec.record.logo; 
					sprites[i].material =sponsorMaterial;
					} else 
						sprites[i].sprite = null;
			}
		}
		public void addPoints(int aPoints,int aPosition) {
			
			seasonPoints += aPoints;
			ChampionshipSeasonLeague league = ChampionshipSeason.ACTIVE_SEASON.leagueForTeam(this);
			int position = (league.divisionNumber*8)+aPosition;
			for(int i = 0;i<this.sponsorRelationships.Count;i++) {
				 int differenceToDemand = sponsorRelationships[i].record.positionDemanded-position;
				 // If positive, we have impressed this sponsor
				 // If Negative, we have lost reputation with this sponsor;
				 if(differenceToDemand<-8) {
				 	differenceToDemand = -8;
				 }
				 if(differenceToDemand>8) {
				 	differenceToDemand = 8;
				 }
				 // Multiply by 20 to make it more effective
				 differenceToDemand *= 20;
				 sponsorRelationships[i].currentRelationshipValue += differenceToDemand;
				 if(sponsorRelationships[i].currentRelationshipValue<0) { 
				 	sponsorRelationships[i].currentRelationshipValue = 0;
				}
				if(sponsorRelationships[i].currentRelationshipValue>1000) {
					sponsorRelationships[i].currentRelationshipValue = 1000;
				}
				
			}
		}
		
		public SponsorInterestInfo interestFromSponsor(SponsorRecord aSponsor) {
			for(int i = 0;i<this.sponsorRelationships.Count;i++) {
				if(sponsorRelationships[i].record==aSponsor) {
					return sponsorRelationships[i].interest;
				}
			}
			return null;
		}
		public GTCar otherCar(GTCar aThisCar) {
			if(cars[0]==aThisCar) {
				return cars[1];
			} else {
				return cars[0];
			}
		}

		public bool hasResearchCompletingOnDay(int aDay) {
			if(cars[0].hasResearchCompletingOnDay(aDay)!=null||cars[1].hasResearchCompletingOnDay(aDay)!=null) {
				return true;
			}
			return false;
		}
		public void doTick(int aTick) {
			for(int i = 0;i<this.cars.Count;i++) {
				if(cars[i].partBeingResearched!=null) {
					GTEquippedResearch partBeingResearched = cars[i].partBeingResearched;
					cars[i].partBeingResearched.daysOfResearchRemaining--;
					if(cars[i].partBeingResearched!=null&&ChampionshipSeason.ACTIVE_SEASON.nextRace!=null)
					if(cars[i].partBeingResearched.dayOfCompletion==ChampionshipSeason.ACTIVE_SEASON.nextRace.startDate) {
						cars[i].partBeingResearched.dayOfCompletion++;
						cars[i].partBeingResearched.daysOfResearchRemaining++;
					}
					if(partBeingResearched.daysOfResearchRemaining == 0) {

				//		partBeingResearched.level++;
						if(this.humanControlled) {
							DialogueLua.SetVariable("CompletedResearchName",""+partBeingResearched.researchRow._partname);
			
							GarageManager.REF.doConversation("ResearchComplete");
						}
					}
				}
			}
			if(!humanControlled) {
				findSponsorsForMe();
			}
		}

		public List<SponsorRelationshipRecord> allInterestedSponsors {
			get {
				List<SponsorRelationshipRecord> r = new List<SponsorRelationshipRecord>();
				for(int i = 0;i<this.sponsorRelationships.Count;i++) {
					r.Add(this.sponsorRelationships[i]);
				}
				r.Sort(randSort);  
				return r;
			}
		}
		public int randSort(SponsorRelationshipRecord name1, SponsorRelationshipRecord name2)
		{
			return UnityEngine.Random.Range(-1,1);
		}

		private void findSponsorsForMe() {
			if(this.hasSponsorForPlace(ESponsorPosition.Back)==null) {
				if(allInterestedSponsors.Count>0) {
					addContract(ESponsorPosition.Back,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Bonnet)==null) {
				if(allInterestedSponsors.Count>0) {
					addContract(ESponsorPosition.Bonnet,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Left)==null) {
				if(allInterestedSponsors.Count>0) {
					addContract(ESponsorPosition.Left,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Right)==null) {
				if(allInterestedSponsors.Count>0) {
					addContract(ESponsorPosition.Right,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}
			if(this.hasSponsorForPlace(ESponsorPosition.Roof)==null) {
				if(allInterestedSponsors.Count>0) {
					addContract(ESponsorPosition.Right,allInterestedSponsors[0],(int) allInterestedSponsors[0].interest.sponsorValue,5);
				}
			}

		}
		public IRDSCarControllerAI getCarFromDriver(GTDriver aDriver) {
			int index = indexForDriver(aDriver);
			GTCar car = cars[index];

			IRDSCarControllerAI ret = car.carReference;
			ret.SetDriverName(aDriver.name);
			return ret;
		}

		public GTDriver getDriverFromCar(GTCar aCar) {
			int index = indexForCar(aCar);
			if(index>=0) {

				GTDriver driver = drivers[index];
				return driver;
			}
			return null;
		}
		public GTCar getGTCarFromDriver(GTDriver aDriver) {
			int index = indexForDriver(aDriver);
			GTCar car = cars[index];
			return car;
		}
		public GTCar hasCar(GTCar aCar) {
			for(int i = 0;i<this.cars.Count;i++) {
				if(cars[i]==aCar) {
					return cars[i];
				}
			}
			return null;
		}
		public GTDriver hasDriver(GTDriver aDriver) {
			for(int i = 0;i<drivers.Count;i++) {
				if(drivers[i]==aDriver) {
					return drivers[i];
				}
			}
			return null;
		}
		public int indexForCar(GTCar aCar) {
			for(int i = 0;i<cars.Count;i++) {
				if(cars[i]==aCar) {
					return i;
				}
			}
			return -1;
		}
		public int indexForDriver(GTDriver aDriver) {
			for(int i = 0;i<drivers.Count;i++) {
				if(drivers[i]==aDriver) {
					return i;
				}
			}
			return -1;
		}

	}
}

