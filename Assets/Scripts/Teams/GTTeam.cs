// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Drivers;
using Cars;
using Database;
using UnityEngine;


namespace Teams
{
	[System.Serializable]
	public class GTTeam
	{
		public BetterList<GTDriver> drivers = new BetterList<GTDriver>();
		public BetterList<GTCar> cars = new BetterList<GTCar>();
		public Color teamColor;
		public bool humanControlled = false;
		public string teamName;

		public int seasonPoints = 0;
		public int seasonWins = 0;
		public int cash = 200000;
		public static string HUMANS_DEBUG_TEAM = "Team Pink";
		public GTTeam (TeamDataRecord aTeamDataRecord) {
			cars.Add(aTeamDataRecord.carA);
			cars.Add(aTeamDataRecord.carB);
			cars[0].initRandomResearch(5);
			cars[1].initRandomResearch(5);

			drivers.Add(aTeamDataRecord.driverA);
			drivers.Add(aTeamDataRecord.driverB);
			teamColor = aTeamDataRecord.teamColor;
			teamName = aTeamDataRecord.name;

			if(teamName==HUMANS_DEBUG_TEAM) {
				humanControlled = true;
			} else {
			
			}
		}
		public GTCar otherCar(GTCar aThisCar) {
			if(cars[0]==aThisCar) {
				return cars[1];
			} else {
				return cars[0];
			}
		}

		public bool hasResearchCompletingOnDay(int aDay) {
			if(cars[0].hasResearchCompletingOnDay(aDay)!=null||cars[1].hasResearchCompletingOnDay(aDay)!=null) {
				return true;
			}
			return false;
		}
		public void doTick(int aTick) {
			for(int i = 0;i<this.cars.size;i++) {
				if(cars[i].partBeingResearched!=null) {
					GTEquippedResearch partBeingResearched = cars[i].partBeingResearched;
					cars[i].partBeingResearched.daysOfResearchRemaining--;
					if(partBeingResearched.daysOfResearchRemaining == 0) {

				//		partBeingResearched.level++;
						Debug.Log (partBeingResearched.researchRow._partname+" is now researched: "+partBeingResearched.level);
					}
				}
			}
		}
		public IRDSCarControllerAI getCarFromDriver(GTDriver aDriver) {
			int index = indexForDriver(aDriver);
			GTCar car = cars[index];

			IRDSCarControllerAI ret = car.carReference;
			ret.SetDriverName(aDriver.driverName);
			return ret;
		}

		public GTDriver getDriverFromCar(GTCar aCar) {
			int index = indexForCar(aCar);
			GTDriver driver = drivers[index];
			return driver;
		}
		public GTCar getGTCarFromDriver(GTDriver aDriver) {
			int index = indexForDriver(aDriver);
			GTCar car = cars[index];
			return car;
		}
		public GTCar hasCar(GTCar aCar) {
			for(int i = 0;i<this.cars.size;i++) {
				if(cars[i]==aCar) {
					return cars[i];
				}
			}
			return null;
		}
		public GTDriver hasDriver(GTDriver aDriver) {
			for(int i = 0;i<drivers.size;i++) {
				if(drivers[i]==aDriver) {
					return drivers[i];
				}
			}
			return null;
		}
		public int indexForCar(GTCar aCar) {
			for(int i = 0;i<cars.size;i++) {
				if(cars[i]==aCar) {
					return i;
				}
			}
			return -1;
		}
		public int indexForDriver(GTDriver aDriver) {
			for(int i = 0;i<drivers.size;i++) {
				if(drivers[i]==aDriver) {
					return i;
				}
			}
			return -1;
		}

	}
}

