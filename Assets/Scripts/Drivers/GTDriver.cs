// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Cars;
using Database;
using UnityEngine;
using System.Collections.Generic;
using Utils;


namespace Drivers
{
	[System.Serializable]
	public class GTDriver : GTDriverWithContract
	{
		public GTCar assignedCar;
		public int championshipPoints;
		public int lastRacePoints;

		public static List<GTDriver> allDrivers = new List<GTDriver>();

		public int load_bonusPerRace;
		public int load_payPerRace;
		public int load_remainingOnContract;

		public GTDriver ()
		{
		}
		public override string SaveString() {
			return Base64.Base64Encode(base.SaveString()+"|"+championshipPoints+"|"+lastRacePoints+"|"+contract.bonusPerRace+"|"+contract.payPerRace+"|"+contract.remainingOnContract+"|");
		}

		public DriversSettings driversSettings {
			get {
				DriversSettings r = new DriversSettings();
				r.AggressivenessOnBrakeMax = this.aggressivenessOnBrake;
				r.AggressivenessOnBrakeMin = this.aggressivenessOnBrake;
				r.backCollDistMax = this.backCollDist;
				r.backCollDistMin = this.backCollDist;
				r.backToLineIncrementMax = this.backToLineIncrement;
				r.backToLineIncrementMin = this.backToLineIncrement;
				r.collisionSideFactorMax = this.collisionSideFactor;
				r.collisionSideFactorMin = this.collisionSideFactor;
				r.CorneringSpeedFactorMax = this.corneringSpeedFactor;
				r.CorneringSpeedFactorMin = this.corneringSpeedFactor;
				r.driftingThrotleFactorMax = this.driftingThrottleFactor;
				r.driftingThrotleFactorMin = this.driftingThrottleFactor;
				r.frontCollDistMax = this.frontCollDist;
				r.frontCollDistMin = this.frontCollDist;
				r.fuelloadPorcentageMax = this.fuelLoadPercentage;
				r.fuelloadPorcentageMin = this.fuelLoadPercentage;
				r.FullAccelMaringMax = this.fullAccelMargin;
				r.FullAccelMaringMin = this.fullAccelMargin;
				r.heightMarginMax = this.heightMargin;
				r.heightMarginMin = this.heightMargin;
				r.humanErrorMax = this.humanError;
				r.humanErrorMin =this.humanError;
				r.jumpThrottleMulpilierMax = this.jumpThrottleMultiplier;
				r.jumpThrottleMulpilierMin = this.jumpThrottleMultiplier;
				r.jumpThrottleTimeMax = this.jumpThrottleTime;
				r.jumpThrottleTimeMin = this.jumpThrottleTime;
				r.LENGTH_MARGINMax = this.lengthMargin;
				r.LENGTH_MARGINMin = this.lengthMargin;
				r.LOOKAHEAD_FACTORMax = this.lookAheadFactor;
				r.LOOKAHEAD_FACTORMin = this.lookAheadFactor;
				r.LookAheadConst = this.lookAheadConstant;
				//r.maxAgressOnBrkDACMax = this.ma
				r.maxDriftAngleMax = this.maxDriftAngle;
				r.maxDriftAngleMin = this.maxDriftAngle;
				r.offTrackThrottleMulpilierMax = this.offtrackThrottleMultiplier;
				r.offTrackThrottleMulpilierMin = this.offtrackThrottleMultiplier;
				r.overtakeFactorMax = this.overtakeFactor;
				r.overtakeFactorMin = this.overtakeFactor;
				r.overtakeOffsetIncrementMaxMax = this.overtakeOffsetIncrementMax;
				r.overtakeOffsetIncrementMaxMin = this.overtakeOffsetIncrementMax;
				r.overtakeOffsetIncrementMinMax = this.overtakeOffsetIncrementMin;
				r.overtakeOffsetIncrementMinMin = this.overtakeOffsetIncrementMin;
				r.overtakeSpeedDiferenceMax = this.overtakeSpeedDifference;
				r.overtakeSpeedDiferenceMin = this.overtakeSpeedDifference;
				r.shifFactorMax = this.shiftFactor;
				r.shifFactorMin = this.shiftFactor;
				r.shiftUpFactorMax = this.shiftUpFactor;
				r.shiftUpFactorMin = this.shiftUpFactor;
				r.SIDE_MARGINMax = this.SIDE_MARGIN;
				r.SIDE_MARGINMin = this.SIDE_MARGIN;
				r.sideAvoidingFactorMax = this.sideAvoidingFactor;
				r.sideAvoidingFactorMin = this.sideAvoidingFactor;
				r.sideMarginMax = this.sideMargin; 
				r.sideMarginMin = this.sideMargin;
				r.speedSteeringFactorMax = this.speedSteeringFactor;
				r.speedSteeringFactorMin = this.speedSteeringFactor;
				r.steeringDriftFactorMax = this.steeringDriftFactor;
				r.steeringDriftFactorMin = this.steeringDriftFactor;
				
				return r;
			}
		}

		public override void FromString(string aString) {
			string s = Base64.Base64Decode(aString);
			string[] split = s.Split (new char[] {'|'});
			base.FromString(split[0]);
			championshipPoints = Convert.ToInt32(split[1]);
			this.lastRacePoints = Convert.ToInt32(split[2]);
			load_bonusPerRace = Convert.ToInt32(split[3]);
			load_payPerRace = Convert.ToInt32(split[4]);
			load_remainingOnContract = Convert.ToInt32(split[5]);
			  
		}
		public void initContract() {
			
			this.contract.bonusPerRace = this.load_bonusPerRace;;
			this.contract.payPerRace = this.load_payPerRace;
			this.contract.remainingOnContract = this.load_remainingOnContract;
		}
		public static float percentOfGoodnessBrakingValue(float aValue) {
			float worstBraking = brakingAggressionLimit(false);;
			float bestBraking = brakingAggressionLimit(true);
			return (aValue-worstBraking)/(bestBraking-worstBraking);
		}
		public static float percentOfGoodnessCorneringValue(float aValue) {
			float worst = corneringSpeedLimit(false);
			float best = corneringSpeedLimit(true);
			return (aValue-worst)/(best-worst);
		}
		public static float percentOfGoodnessErrorValue(float aValue) {
			float worst = errorLimit(false);
			float best = errorLimit(true);
			float divided = ((aValue-worst)/(best-worst));
			float toReturn = 1-divided;
			return toReturn;
		}
		public static float percentOfGoodnessOvertakingValue(float aValue) {
			float worst = overtakingLimit(true);
			float best = overtakingLimit(false);
			return (aValue-worst)/(best-worst);
		}
		public static float percentOfGoodnessSponsorValue(float aValue) {
			float worst = sponsorLimit(false);
			float best = sponsorLimit(true);
			return (aValue-worst)/(best-worst);
		}

		public static float brakingAggressionLimit(bool aMax) {
			float limit = float.MaxValue;
			if(aMax) {
				limit = float.MinValue;
			}
			for(int i =0;i<allDrivers.Count;i++) {
				if(aMax) {
					if(allDrivers[i].aggressivenessOnBrake>limit) {
						limit = allDrivers[i].aggressivenessOnBrake;
					}
				} else if(allDrivers[i].aggressivenessOnBrake<limit) {
					limit = allDrivers[i].aggressivenessOnBrake;
				}
		    }
			return limit;
		}
		public static float corneringSpeedLimit(bool aMax) {
			float limit = float.MaxValue;
			if(aMax) {
				limit = float.MinValue;
			}
			for(int i =0;i<allDrivers.Count;i++) {
				if(aMax) {
					if(allDrivers[i].corneringSpeedFactor>limit) {
						limit = allDrivers[i].corneringSpeedFactor;
					}
				} else if(allDrivers[i].corneringSpeedFactor<limit) {
					limit = allDrivers[i].corneringSpeedFactor;
				}
			}
			return limit;
		}
		public static float errorLimit(bool aMax) {
			float limit = float.MaxValue;
			if(aMax) {
				limit = float.MinValue;
			}
			for(int i =0;i<allDrivers.Count;i++) {
				if(aMax) {
					if(allDrivers[i].humanError>limit) {
						limit = allDrivers[i].humanError;
					}
				} else if(allDrivers[i].humanError<limit) {
					limit = allDrivers[i].humanError;
				}
			}
			return limit;
		}
		public static float overtakingLimit(bool aMax) {
			float limit = float.MaxValue;
			if(aMax) {
				limit = float.MinValue;
			}
			for(int i =0;i<allDrivers.Count;i++) {
				if(aMax) {
					if(allDrivers[i].overtakeSpeedDifference>limit) {
						limit = allDrivers[i].overtakeSpeedDifference;
					}
				} else if(allDrivers[i].overtakeSpeedDifference<limit) {
					limit = allDrivers[i].overtakeSpeedDifference;
				}
			}
			return limit;
		}
		public static float sponsorLimit(bool aMax) {
			float limit = float.MaxValue;
			if(aMax) {
				limit = float.MinValue;
			}
			for(int i =0;i<allDrivers.Count;i++) {
				if(aMax) {
					if(allDrivers[i].sponsorFriendliness>limit) {
						limit = allDrivers[i].sponsorFriendliness;
					}
				} else if(allDrivers[i].sponsorFriendliness<limit) {
					limit = allDrivers[i].sponsorFriendliness;
				}
			}
			return limit;
		}
	}

}

