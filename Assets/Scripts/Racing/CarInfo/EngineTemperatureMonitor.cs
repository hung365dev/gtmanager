// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using cars;
using UnityEngine;


namespace Racing
{
	[System.Serializable]
	public class EngineTemperatureMonitor
	{
		
		public IRDSCarControllerAI aiCar;
		public IRDSDrivetrain aiDriveTrain;
		public IRDSCarControllInput aiInput;

		// Max Revs for this engine
		public float _maxRPM = 0f;

		// The base effect of the radiators cooling
		public float baseCooling = 0.02f;

		// After this many meters per second, the radiator cannot cool the car down quicker
		public float maxCoolingSpeed = 75f;

		// Start Temp and Current temp
		public float currentTemperature = 190f;
		public float perfectTemperature = 190f;
		public float engineBlowupTemp = 260f;

		// These values are just so I can monitor what its doing in Unitys IDE
		public float percentTempRange = 0f;
		public float lastHeat = 0f;
		public float lastCool = 0f;
		public float lastRPMPercent = 0f;
		public float maxTempPercent = 0f;

		public bool hasFailed = false;

		public bool isGettingHot = false;
		public bool isTooHot = false;
		public bool isOverheating = false;
		public EngineTemperatureMonitor ()
		{
		}
		public float heatPercent {
			get {
				return (currentTemperature-perfectTemperature)/(engineBlowupTemp-perfectTemperature);
			}
		}
		public void initDriveTrainVals(IRDSDrivetrain aDriveTrain,IRDSCarControllInput aInput) {
			aiDriveTrain = aDriveTrain;
			aiInput = aInput;
			_maxRPM = aDriveTrain.revLimiterRPM;

		}
		public void Update(IRDSDrivetrain aDriveTrain,IRDSCarControllerAI aCarController,IRDSCarControllInput aInput,RacingAI aAI) {
			// First, we add the heat from the current RPM
			if(aDriveTrain==null) {
				return;
			}

			float currentRPM = aDriveTrain.GetRPM();
			float originalMinRPM = aDriveTrain.GetOriginalMinRPM();
			if(!float.IsNaN(currentRPM)) {
				float tempToAdd = (((float) Math.Pow(currentRPM/(aDriveTrain.revLimiterRPM-originalMinRPM),5))/15f)/2;
				currentTemperature += tempToAdd;
				// Just for montioring in Unity IDE
				lastHeat = tempToAdd;
				lastRPMPercent = aDriveTrain.GetRPM()/aDriveTrain.revLimiterRPM;

			}
			// Is the cars cooler "on" (yes if temperature is above perfect temperature)?
			if(currentTemperature>perfectTemperature) {
				// The faster we're going, the more cooling, car coolers + we get the base cooling amount
				float currentSpeed = aInput.GetCarSpeed();

				if(currentSpeed>maxCoolingSpeed) {
					currentSpeed = maxCoolingSpeed;
				}
				float tempToTake = (((float) Math.Pow(currentSpeed/maxCoolingSpeed,4))/8f+this.baseCooling)/2;
				currentTemperature -= tempToTake;
				lastCool = tempToTake;
			}
			percentTempRange= (currentTemperature-perfectTemperature)/(engineBlowupTemp-perfectTemperature);

			if(percentTempRange>maxTempPercent) {
				// Just for monitoring in Unity IDE
				maxTempPercent = percentTempRange;
			}
			if(hasFailed) {
				return;
			}
			if(percentTempRange<0.70f) {
				if(aAI.engineFailure!=EEngineFailureStage.Normal) {
					aAI.engineFailure = EEngineFailureStage.Normal;
					aAI.setEngineFailureStage();
					this.isTooHot = false;
					this.isOverheating = false;
					this.isGettingHot = false;
				}
			} else if(percentTempRange<0.85f) {
				if(aAI.engineFailure!=EEngineFailureStage.Hot) {
					aAI.engineFailure = EEngineFailureStage.Hot;
					aAI.setEngineFailureStage();
					
					this.isGettingHot = true;
					
					this.isTooHot = false;
					this.isOverheating = false;
				}
			} else if(percentTempRange<1f) {
				if(aAI.engineFailure!=EEngineFailureStage.VeryHot) {
					aAI.engineFailure = EEngineFailureStage.VeryHot;
					aAI.setEngineFailureStage();
					
					this.isGettingHot = false;
					
					this.isTooHot = false;
					this.isOverheating = true;
				}
			} else {
				if(aAI.engineFailure!=EEngineFailureStage.Failed) {
					hasFailed = true;
					aAI.engineFailure = EEngineFailureStage.Failed;
					aAI.setEngineFailureStage();
					
					this.isGettingHot = false;
					
					this.isTooHot = true;
					this.isOverheating = true;
		
				}
			}

		}
	}
}

