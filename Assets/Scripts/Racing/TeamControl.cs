// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using Database;
using System.Collections.Generic;
using championship;
using Teams;
using PixelCrushers.DialogueSystem;


namespace Racing
{
	public class TeamControl : MonoBehaviour
	{
		public RacingAI selectedCar;
		public IndividualCarInterfaceManager carInterface;
		public IRDSManager manager; 
		public List<RacingAI> racingAIs = new List<RacingAI>();
		
		public IRDSCarCamera carCamera;
		public UILabel currentlyViewingLabel;
		public TweenAlpha currentlyViewingTween;
		public ECameraViews cameraView = ECameraViews.ChaseCamera;

		public GameObject driver1Camera;
		public GameObject driver2Camera;

		public UIButton btnDoOrDieTyres1;
		public UIButton btnDriveNormalTyres1;
		public UIButton btnTakeItEasyTyres1;
		
		public UIButton btnDoOrDieEngine1;
		public UIButton btnDriveNormalEngine1;
		public UIButton btnTakeItEasyEngine1;

		public UIButton btnNitro;
		
		public UIButton changeCars;
		public UIButton changeCamera;

		public EDriverOrders lastOrders;
		public EDriverOrders lastTyreOrders;
		public Camera raceStartCamera;
		public static TeamControl REF;
		public TeamControl ()
		{
		}

		public void finish() {
			try {
			Destroy(this.btnDoOrDieEngine1.gameObject);
			Destroy(this.btnDriveNormalEngine1.gameObject);
			Destroy(this.btnTakeItEasyEngine1.gameObject);
			if(changeCars!=null) {
				Destroy(this.changeCars.gameObject);
				Destroy(this.changeCamera.gameObject);
			}
			} catch(Exception e) {
			
		} 
			selectedCar = null;
			carInterface.finish();
			
		}
		public void onStartedRace() {
			changeCameraIcon();
			carCamera.freeCamera = false;
			carCamera.overrideLookAt = false;
			carCamera.GetComponent<Camera>().enabled = true;
			carCamera.ActivateRoadCamera();
			RaceManager.REF.hasStarted = true;
			//this.changeCar();
			if(raceStartCamera!=null) {
				Destroy(raceStartCamera.gameObject);
			}
		}
		public void initHumanCar(IRDSCarControllerAI aCar) {
			if(carCamera==null) {
				carCamera = GameObject.Find ("Main_Camera").GetComponent<IRDSCarCamera> ();;

				if(GameObject.Find("RaceStartCamera")!=null) {				
					carCamera.GetComponent<Camera>().enabled = false;
					raceStartCamera = GameObject.Find ("RaceStartCamera").GetComponent<Camera>();;
				}
			
			}
			RacingAI thisCarsAI = aCar.GetComponent<RacingAI>();
			thisCarsAI.aiInput = aCar.GetComponent<IRDSCarControllInput>();
			racingAIs.Add(thisCarsAI);
			if(selectedCar==null) {
				selectedCar = thisCarsAI;
				selectedCar.aiInput = selectedCar.GetComponent<IRDSCarControllInput>();
				selectedCar.aiCar.onRaceStart += onStartedRace;
				carCamera.changeTarget(selectedCar.aiInput.GetInstanceID());
			}
			if(racingAIs.Count==2) {
				changeCar();
			}
			if(carInterface==null) {
				carInterface = GameObject.Find("IndividualRaceInterface").GetComponent<IndividualCarInterfaceManager>();
			}
			carInterface.targetAI = selectedCar;
  
			

		}

		public void initDriversFace(RacingAI aAI) {
			GTTeam team = ChampionshipSeason.ACTIVE_SEASON.getUsersTeam();
			int indexForThis = team.indexForDriver(aAI.driverRecord);
			string findThis = "DriverFace2";
			if(indexForThis==0) {
				findThis = "DriverFace1";
			}
			GameObject f = GameObject.Find (findThis);
			if(f!=null) {
				DriverFaceManager m = f.GetComponent<DriverFaceManager>();
				RacingAI ai = aAI;
				m.init(ai);
			}	
		}
		public void initButtons() {
			if(GameObject.Find ("ChangeDriverButton")!=null&&changeCars==null) {
			
				changeCars = GameObject.Find("ChangeDriverButton").GetComponent<UIButton>();
				
				for(int i = 0;i<this.racingAIs.Count;i++) {
					this.initDriversFace(racingAIs[i]);
				}
				this.driver1Camera = GameObject.Find ("CameraOn");
				this.driver2Camera = GameObject.Find ("CameraOn 1");
				currentlyViewingLabel = GameObject.Find("NowViewingLabel").GetComponent<UILabel>();
				currentlyViewingTween = GameObject.Find ("NowViewingLabel").GetComponent<TweenAlpha>();
				currentlyViewingTween.enabled = false;

				changeCamera = GameObject.Find("ButtonToggleCamera").GetComponent<UIButton>();
				changeCars.onClick.Add(new EventDelegate(this,"changeCar"));
				changeCamera.onClick.Add (new EventDelegate(this,"onChangeCamera"));
			}
		}
		public void Update() { 
			if(selectedCar!=null)
			if(selectedCar.currentOrders!=lastOrders) {
				lastOrders = selectedCar.currentOrders;
				if(this.btnDoOrDieEngine1==null) {
					initButtons();
					if(this.btnDoOrDieEngine1==null) {
						return;
					}
				}

			
			}
			if(selectedCar!=null)
			if(selectedCar.currentTyreOrders!=lastTyreOrders) {
				lastTyreOrders = selectedCar.currentTyreOrders;
				if(this.btnDoOrDieTyres1==null) {
					initButtons();
					if(this.btnDoOrDieTyres1==null) {
						return;
					}
				}
				
				this.btnDoOrDieTyres1.isEnabled = true;
				this.btnDriveNormalTyres1.isEnabled = true;
				this.btnTakeItEasyTyres1.isEnabled = true;
				switch(lastTyreOrders) {
					case(EDriverOrders.DoOrDie):this.btnDoOrDieTyres1.isEnabled = false;break;
					case(EDriverOrders.DriveNormal):this.btnDriveNormalTyres1.isEnabled = false;break;
					case(EDriverOrders.TakeItEasy):this.btnTakeItEasyTyres1.isEnabled = false;break;
				}
			}

		}
		public void changeCameraIcon() {
			if(driver1Camera!=null) {
				if(selectedCar==racingAIs[1]) {
					
					driver1Camera.gameObject.SetActive(false);
					driver2Camera.gameObject.SetActive(true);
				} else {
					
					driver1Camera.gameObject.SetActive(true);
					driver2Camera.gameObject.SetActive(false);
				}
			}
		}
		public void changeCar() {
			if(selectedCar == null) {
				selectedCar = racingAIs[1];
			}
			if (selectedCar.driverRecord.id==racingAIs[0].driverRecord.id) {
				carCamera.changeTarget(racingAIs[1].aiInput.GetInstanceID());
				selectedCar = racingAIs[1];
				
			} else {
				carCamera.changeTarget(racingAIs[0].aiInput.GetInstanceID());
				selectedCar = racingAIs[0];
			}
			if(currentlyViewingTween!=null) {
				currentlyViewingTween.ResetToBeginning();
				currentlyViewingTween.enabled = true;
				currentlyViewingLabel.text = "NOW VIEWING "+selectedCar.driverName.ToUpper();
				changeCameraIcon();
			} else this.initButtons();
			carInterface.targetAI = selectedCar;
		}
/*
		public void onUseNitro() {

			if (selectedCar != null) {
				if(selectedCar.nitrosRemaining>0) {
					if(RacingAI.considerNitroTutorials) {
						DialogueLua.SetVariable("HintArrowNitroBoost",2);
						RaceManager.REF.doConversation("NitroBoost");
						RacingAI.considerNitroTutorials = false;
					}
					selectedCar.useNitro();
				}
			}
		}*/
		public void onChangeCamera() { 
			switch (cameraView) {
				case(ECameraViews.ChaseCamera):
					cameraView = ECameraViews.HeliCam;
				break;
				case(ECameraViews.HeliCam):
					cameraView = ECameraViews.TVCamera;
				break;
				case(ECameraViews.TVCamera):
					cameraView = ECameraViews.FrontBumper;
				break;
			case(ECameraViews.FrontBumper):
				cameraView = ECameraViews.ChaseCamera;
				break;
			}
			setCameraFromView ();
		}

		private void setCameraFromView() {
				carCamera.changeTarget (selectedCar.GetInstanceID ());
			switch (cameraView) {
				case(ECameraViews.ChaseCamera):
					carCamera.DeactivateRoadCamera ();
					carCamera.changeView ("ExteriorViewF");
				break;
				case(ECameraViews.HeliCam):
					carCamera.DeactivateRoadCamera();
					carCamera.changeView ("Roof");
				break;
				case(ECameraViews.TVCamera):
					carCamera.ActivateRoadCamera();
				break;
				case(ECameraViews.FrontBumper):
				carCamera.DeactivateRoadCamera();
				carCamera.changeView ("FrontBumper");
				break;

			}
		}
		public void Start() {
			REF = this;
			manager = GameObject.Find ("IRDSManager").GetComponent<IRDSManager> ();
			if (TeamDatabase.REF == null) {
				Application.LoadLevel("InitGame");
				return;
			}

			
		} 
	}
}

