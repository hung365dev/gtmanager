// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using Database;
using System.Collections.Generic;
using championship;
using Teams;


namespace Racing
{
	public class TeamControl : MonoBehaviour
	{
		public RacingAI selectedCar;
		public IndividualCarInterfaceManager carInterface;
		public IRDSManager manager; 
		public List<RacingAI> racingAIs = new List<RacingAI>();
		
		public IRDSCarCamera carCamera;

		public ECameraViews cameraView = ECameraViews.ChaseCamera;


		public UIButton btnDoOrDie;
		public UIButton btnDriveNormal;
		public UIButton btnTakeItEasy;
		public UIButton btnNitro;
		
		public UIButton changeCars;
		public UIButton changeCamera;

		public EDriverOrders lastOrders;
		public Camera raceStartCamera;
		public TeamControl ()
		{
		}

		public void finish() {
			Destroy(btnDoOrDie.gameObject);
			Destroy(btnDriveNormal.gameObject);
			Destroy(btnTakeItEasy.gameObject);
			if(changeCars!=null) {
				Destroy(this.changeCars.gameObject);
				Destroy(this.changeCamera.gameObject);
			}
			selectedCar = null;
			carInterface.finish();
		}
		public void onStartedRace() {
			carCamera.freeCamera = false;
			carCamera.overrideLookAt = false;
			carCamera.GetComponent<Camera>().enabled = true;
			carCamera.ActivateRoadCamera();
			RaceManager.REF.hasStarted = true;
			this.changeCar();
			if(raceStartCamera!=null) {
				Destroy(raceStartCamera.gameObject);
			}
		}
		public void initHumanCar(IRDSCarControllerAI aCar) {
			if(carCamera==null) {
				carCamera = GameObject.Find ("Main_Camera").GetComponent<IRDSCarCamera> ();;

				if(GameObject.Find("RaceStartCamera")!=null) {				
					carCamera.GetComponent<Camera>().enabled = false;
					raceStartCamera = GameObject.Find ("RaceStartCamera").GetComponent<Camera>();;
				}
			
			}
			RacingAI thisCarsAI = aCar.GetComponent<RacingAI>();
			thisCarsAI.aiInput = aCar.GetComponent<IRDSCarControllInput>();
			racingAIs.Add(thisCarsAI);
			if(selectedCar==null) {
				selectedCar = thisCarsAI;
				selectedCar.aiInput = selectedCar.GetComponent<IRDSCarControllInput>();
				selectedCar.aiCar.onRaceStart += onStartedRace;
				carCamera.changeTarget(selectedCar.aiInput.GetInstanceID());
			}
			if(racingAIs.Count==2) {
				changeCar();
			}
			if(carInterface==null) {
				carInterface = GameObject.Find("IndividualRaceInterface").GetComponent<IndividualCarInterfaceManager>();
			}
			carInterface.targetAI = selectedCar;
		}
		public void initButtons() {
			if(GameObject.Find ("DriverOrderDoOrDie")!=null) {
				btnDoOrDie = GameObject.Find("DriverOrderDoOrDie").GetComponent<UIButton>();
				btnDriveNormal = GameObject.Find ("DriverOrderDriverNormally").GetComponent<UIButton>();
				btnTakeItEasy = GameObject.Find ("DriverOrderSaveTyres").GetComponent<UIButton>();
				btnNitro = GameObject.Find ("ButtonUseNitro").GetComponent<UIButton>();
				btnDoOrDie.onClick.Add(new EventDelegate(this,"changeToDoOrDie"));
				btnDriveNormal.onClick.Add(new EventDelegate(this,"changeToDriveNormally"));
				btnTakeItEasy.onClick.Add(new EventDelegate(this,"changeToSaveTyres"));
				btnNitro.onClick.Add (new EventDelegate(this,"onUseNitro"));
				
				changeCars = GameObject.Find("ChangeDriverButton").GetComponent<UIButton>();
				changeCamera = GameObject.Find("ButtonToggleCamera").GetComponent<UIButton>();
				changeCars.onClick.Add(new EventDelegate(this,"changeCar"));
				changeCamera.onClick.Add (new EventDelegate(this,"onChangeCamera"));
			}
		}
		public void Update() { 
			if(selectedCar!=null)
			if(selectedCar.currentOrders!=lastOrders) {
				lastOrders = selectedCar.currentOrders;
				if(this.btnDoOrDie==null) {
					initButtons();
					if(btnDoOrDie==null) {
						return;
					}
				}

				this.btnDoOrDie.isEnabled = true;
				this.btnDriveNormal.isEnabled = true;
				this.btnTakeItEasy.isEnabled = true;
				switch(lastOrders) {
					case(EDriverOrders.DoOrDie):this.btnDoOrDie.isEnabled = false;break;
					case(EDriverOrders.DriveNormal):this.btnDriveNormal.isEnabled = false;break;
					case(EDriverOrders.TakeItEasy):this.btnTakeItEasy.isEnabled = false;break;
				}
			}

		}
		public void changeToDriveNormally() {
			this.selectedCar.changeOrders(EDriverOrders.DriveNormal);
		}
		public void changeToDoOrDie() {
			this.selectedCar.changeOrders(EDriverOrders.DoOrDie);
		}
		public void changeToSaveTyres() {
			this.selectedCar.changeOrders(EDriverOrders.TakeItEasy);
		}
		public void changeCar() {
			if(selectedCar == null) {
				selectedCar = racingAIs[1];
			}
			if (selectedCar.driverName.Equals(racingAIs [0].driverName)) {
				carCamera.changeTarget(racingAIs[1].aiInput.GetInstanceID());
				selectedCar = racingAIs[1];
			} else {
				carCamera.changeTarget(racingAIs[0].aiInput.GetInstanceID());
				selectedCar = racingAIs[0];
			}
			carInterface.targetAI = selectedCar;
		}

		public void onUseNitro() {
			if (selectedCar != null) {
				if(selectedCar.nitrosRemaining>0)
					selectedCar.useNitro();
			}
		}
		public void onChangeCamera() {
			switch (cameraView) {
				case(ECameraViews.ChaseCamera):
					cameraView = ECameraViews.HeliCam;
				break;
				case(ECameraViews.HeliCam):
					cameraView = ECameraViews.TVCamera;
				break;
				case(ECameraViews.TVCamera):
					cameraView = ECameraViews.ChaseCamera;
				break;
			}
			setCameraFromView ();
		}

		private void setCameraFromView() {
				carCamera.changeTarget (selectedCar.GetInstanceID ());
			switch (cameraView) {
				case(ECameraViews.ChaseCamera):
					carCamera.DeactivateRoadCamera ();
					carCamera.changeView ("ExteriorViewF");
				break;
				case(ECameraViews.HeliCam):
					carCamera.DeactivateRoadCamera();
					carCamera.changeView ("Roof");
				break;
				case(ECameraViews.TVCamera):
					carCamera.ActivateRoadCamera();
				break;

			}
		}
		public void Start() {
			manager = GameObject.Find ("IRDSManager").GetComponent<IRDSManager> ();
			if (TeamDatabase.REF == null) {
				Application.LoadLevel("InitGame");
				return;
			}

			
		}
	}
}

