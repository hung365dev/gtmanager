// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using Racing;
using Teams;
using Cars;


public class RacingAIBase : MonoBehaviour
{
	
	public IRDSCarControllerAI aiCar;
	public IRDSDrivetrain aiDriveTrain;
	public IRDSCarControllInput aiInput;
	public IRDSAerodynamicResistance aero;
	
	public GTCar carRef;
	public float originalSpeedCorner = 0f;
	public bool humanControl = false;
	
	public IRDSWheel[] wheels;
	public WheelInfo[] wheelInfo; 
	
	public bool inNitroZone = false;
	public float originalPower;
	public float originalTorque; 
	public float originalBrakingAggressiveness;
	public float originalCorneringSpeed;
	public float originalOvertakeSpeedDiff;
	public float originalOvertakeFactor;
	public float originalMaxRPM;

	
	public float frontWingDownforce;
	public float rearWingDownforce;
	public bool inited = false;
	public string driverName;
	
	public IRDSWing[] wings;
	public RacingAIBase ()
	{
	}
	

	public void initCar() {
		
		GameObject g = this.gameObject;
		aiCar = g.GetComponent<IRDSCarControllerAI>();
		aiDriveTrain = g.GetComponent<IRDSDrivetrain>();
		if(g==null||aiDriveTrain==null) {
			return;
		}
		
		aiDriveTrain.useNitro = true;
		aiDriveTrain.nitroBoostDurability = 5;
		aiDriveTrain.nitroFuel = 0;
		aiInput = g.GetComponent<IRDSCarControllInput>();
		
		if(aiInput!=null&&aiInput.GetCarDamage()!=null) {
			aero = g.GetComponent<IRDSAerodynamicResistance>();
			wings = g.GetComponentsInChildren<IRDSWing>();
			
			frontWingDownforce = wings[0].GetLiftCoefficient();
			rearWingDownforce = wings[1].GetLiftCoefficient();
			
			this.wheelInfo = new WheelInfo[wheels.Length];
			for(int i = 0;i<wheelInfo.Length;i++) {
				wheelInfo[i] = new WheelInfo(wheels[i],this.carRef,i<2);
			}
			driverName = this.aiCar.GetDriverName();
			//wings[0].SetLiftCoefficient(-0.3f);
			//wings[1].SetLiftCoefficient(-0.8f);
			originalSpeedCorner = aiCar.GetCorneringSpeedFactor();
			inNitroZone = false;
			this.aiInput.GetCarDamage().SetRepairDelta(0f);
			
			this.originalPower = this.aiDriveTrain.GetMaxPower();
			this.originalTorque = this.aiDriveTrain.GetMaxTorque();
			
			  
		}
		return;
	}
	public void hidePilot() {
		MeshRenderer[] findPilot = this.gameObject.GetComponentsInChildren<MeshRenderer>();
		for(int i = 0;i<findPilot.Length;i++) {
			if(findPilot[i].name.ToLower().Contains("pilot")) {
				findPilot[i].gameObject.SetActive(false);
			}
 		}
	}
	public void recolourCarForTeam(GTTeam aTeam) {
		MeshRenderer[] ms = this.GetComponentsInChildren<MeshRenderer>();
		//	Debug.Log (ms[0].material.shader.name+" on "+this.gameObject.name);
		for(int i = 0;i<ms.Length;i++) 
			if(ms[i].material.shader.name.Contains("Car Paint")||ms[i].material.shader.name.Contains("Chrome")) {
				if(ms[i].gameObject.name.ToLower().Contains("wheel")) {
					ms[i].material.SetColor("_Color",aTeam.wheelColor);
				} else
				ms[i].material.SetColor("_Color",aTeam.teamColor); 
			}
			else {
			//			Debug.Log (ms[i].material.shader.name);
		} 
	}
	public void addWings() {
		this.wings[1].SetLiftCoefficient(this.frontWingDownforce);
		this.wings[0].SetLiftCoefficient(this.rearWingDownforce);
	}
	
	public void removeWings() {
		this.wings[1].SetLiftCoefficient(0f);
		this.wings[0].SetLiftCoefficient(0f);
	}
	

}

