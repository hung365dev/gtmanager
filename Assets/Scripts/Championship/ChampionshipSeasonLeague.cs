// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Teams;
using UnityEngine;
using System.Collections.Generic;
using Drivers;
using Cars;
using Database;
using Championship;
using PixelCrushers.DialogueSystem;
using Utils;


namespace championship
{
	[System.Serializable]
	public class ChampionshipSeasonLeague
	{
		public string leagueName;
		public int divisionNumber;
		public List<ChampionshipRaceSettings> races = new List<ChampionshipRaceSettings>();
		public List<GTTeam> teams = new List<GTTeam>();
		public List<RandomEvent> randomEvents = new List<RandomEvent>();

		public const int MAX_RACES_IN_SEASON = 5;
		public ChampionshipSeasonLeague ()
		{ 

		}

		public string ToString() {
			string s = leagueName+"|"+divisionNumber+"|"+racesToString+"|"+teamsToString+"|"+randomEventsToString;
			return Base64.Base64Encode(s);
		}
		public void FromString(string aString) {
			string[] split = Base64.Base64Decode(aString).Split(new char[] {'|'});
			if(split.Length==5) {
				leagueName = split[0];
				divisionNumber = Convert.ToInt32(split[1]);
				this.racesFromString(split[2]);
				this.teamsFromString(split[3]);
				this.randomEventsFromString(split[4]);
			}
		}

		public void postInit() {
			for(int i =0;i<this.teams.Count;i++) {
				this.teams[i].postInit();
			}
		}
		public void racesFromString(string aString) {
			string s = Base64.Base64Decode(aString);
			string[] split = s.Split (new char[] {'%'});
			for(int i = 0;i<split.Length;i++) {
				string[] raceSplit = split[i].Split (new char[] {'|'});
				if(raceSplit.Length==2) {
				ChampionshipRaceSettings raceSetting = new ChampionshipRaceSettings();
				raceSetting.startDate = Convert.ToInt32(raceSplit[0]);
				for(int j = 0;j<TrackDatabase.REF.tracks.Count;j++) {
					if(TrackDatabase.REF.tracks[j].name==raceSplit[1]) {
						raceSetting.track = TrackDatabase.REF.tracks[j];
						break;
					}
				}
				races.Add(raceSetting);
				}
			}
		}
		public string teamsToString {
			get {
				string s  = "";
				for(int i = 0;i<teams.Count;i++) {
					s += this.teams[i].ToString()+"|";
				}
				s = Base64.Base64Encode(s);
				return s;
			}
		}

		public void teamsFromString(string aString) {
			string uncomp = Base64.Base64Decode(aString);
			string[] split = uncomp.Split(new char[] {'|'});
			for(int i =0;i<split.Length;i++) {
				GTTeam team = new GTTeam();
				if(split[i].Length>5) {
					team.FromString(split[i]);
					this.teams.Add(team);
				}
			}
		}
		public void randomEventsFromString(string aString) {
			aString = Base64.Base64Decode(aString);
			string[] split = aString.Split(new char[] {'%'});
			for(int i = 0;i<split.Length;i++) {
				string[] all = split[i].Split(new char[] {'|'});
				RandomEvent r = new RandomEvent();
				if(all.Length>6) {
					r.date = Convert.ToInt32(all[0]);
					switch(all[1]) {
						case("DriverImprovement"):default:r.eventType = ERandomEventType.DriverImprovement;break;
						case("ExclusiveSponsorDeal"):r.eventType = ERandomEventType.ExclusiveSponsorDeal;break;
						case("FinishAheadOf"):r.eventType = ERandomEventType.FinishAheadOf;break;
						case("LoseARace"):r.eventType = ERandomEventType.LoseARace;break;
						case("ResearchBreakthrough"):r.eventType = ERandomEventType.ResearchBreakthrough;break;
						case("ResearchLeaked"):r.eventType = ERandomEventType.ResearchLeaked;break;
						case("ToxicDriver"):r.eventType = ERandomEventType.ToxicDriver;break;
					}
					r.rewardCash = Convert.ToInt32(all[2]);
					r.conversation = all[3];
					if(all[4]!="0") {
						int driverID = Convert.ToInt32(all[4]);
						for(int c = 0;c<GTDriver.allDrivers.Count;c++) {
							if(GTDriver.allDrivers[c].id == driverID) {
								r.effectedDriver = GTDriver.allDrivers[c];
								break;
							}
						}
					}
					if(all[5]!="0") {
						Debug.LogError("Effected Sponsor: "+all[5]);
						for(int c = 0;c<SponsorDatabase.REF.sponsors.Count;c++) {
							if(SponsorDatabase.REF.sponsors[c].id==Convert.ToInt32(all[5])) {
								r.effectedSponsor = SponsorDatabase.REF.sponsors[c];
								break;
							}
						}
					}
					if(all[6]!="0") {
						GTTeam myTeam = ChampionshipSeason.ACTIVE_SEASON.getUsersTeam();
						for(int c = 0;c<myTeam.cars.Count;c++) {
							for(int j = 0;j<myTeam.cars[c].rndParts.Count;j++) {
								if(myTeam.cars[c].rndParts[j].researchRow._id==Convert.ToInt32(all[6])) {
									r.researchItem = myTeam.cars[c].rndParts[j];
									break;
								}
							}
						}
					}
					r.targetDate = Convert.ToInt32(all[7]);
					this.randomEvents.Add(r);
				}
			}
		}

		public string randomEventsToString {
			get {
				string s = "";

				for(int i = 0;i<this.randomEvents.Count;i++) {
					int effectedDriver = 0;
					if(randomEvents[i].effectedDriver!=null) {
						effectedDriver = randomEvents[i].effectedDriver.id;
					}
					int effectedSponsor = 0;
					if(randomEvents[i].effectedSponsor!=null) {
						effectedSponsor = randomEvents[i].effectedSponsor.id;

					}
					int researchItem = 0;
					if(randomEvents[i].researchItem!=null) {
						researchItem = randomEvents[i].researchItem.researchRow._id;
					}
					string teamName = "";
					if(randomEvents[i].targetTeam!=null) {
						teamName = randomEvents[i].targetTeam.teamName;
					}
					s+=randomEvents[i].date+"|"+randomEvents[i].eventType.ToString()+"|"+randomEvents[i].rewardCash+"|"+randomEvents[i].conversation
						+"|"+effectedDriver+"|"+effectedSponsor+"|"+researchItem+"|"+randomEvents[i].targetDate+"|"+teamName+"%";
				}
				return Base64.Base64Encode(s);
			}
		}
		public string racesToString {
			get {
				string s  = "";
				for(int i = 0;i<races.Count;i++) {
					s += races[i].startDate+"|"+races[i].track.name+"%";
				}
				s = Base64.Base64Encode(s);
				return s;
			}
		}
		public int racesRemainingInSeason {
			get {
				int c = 0;
				for(int i = 0;i<races.Count;i++) {
					if(!races[i].isCompleted) {
						c++;
					}
				}
				return c;
			}
		}
		public GTTeam findTeam1AboveOrBelow(GTTeam aTeam) {
			
			List<GTTeam> teams = sortedTeams;
			int positionForTeam = this.positionForTeamInChampionship(aTeam);
			if(positionForTeam==0) {
				return teams[positionForTeam+1];
			} else {
				return teams[positionForTeam-1];
			}
		}
		public GTTeam relegatedTeam {
			get {
				if(divisionNumber<4) {
					List<GTTeam> teams = sortedTeams;
					return teams[teams.Count-1];
				}
				return null;
			}
		}
		public GTTeam promotedTeam {
			get {
				if(divisionNumber>1) {
					List<GTTeam> teams = sortedTeams;
					return teams[0];
				}
				return null;
			}
		}
		public GTTeam getTeamFromDriver(GTDriver aDriver) {
			for(int i = 0;i<teams.Count;i++) {
				if(teams[i].hasDriver(aDriver)!=null) {
					return teams[i];
				}
			}
			return null;
		}
		public GTTeam getTeamFromCar(GTCar aCar) {
			for(int i = 0;i<teams.Count;i++) {
				GTCar car = teams[i].hasCar(aCar);
				if(car!=null) {
					return teams[i];
				}
			}
			return null;
		}
		public GTTeam hasTeam(GTTeam aTeam) {
			for(int i = 0;i<teams.Count;i++) {
				if(teams[i]==aTeam) {
					return teams[i];
				}
			}
			return null;
		}
		public GTTeam getUsersTeam() {
			for(int i = 0;i<teams.Count;i++) {
				if(teams[i].humanControlled) {
					return teams[i];
				}
			}
			return null;
		}
		public void addTeam(GTTeam aTeamToAdd) {
			teams.Add(aTeamToAdd);
		}
		public void removeTeam(GTTeam aTeamToRemove) {
			teams.Remove(aTeamToRemove);
		}
 
		private int randTrackSort(TrackDatabaseRecord aTrack1,TrackDatabaseRecord aTrack2) {
			return UnityEngine.Random.Range(-1,1);
		}
		public void initRaces() {

			switch(this.divisionNumber) {
				case(1):
					this.leagueName = "Premier Championship";
				break;
				case(2):
					this.leagueName = "Division 1";
				break;
				case(3):
					this.leagueName = "Division 2";
				break;
				case(4):
					this.leagueName = "Division 3";
				break;
			}

			List<TrackDatabaseRecord> allTracks = new List<TrackDatabaseRecord>();
			for(int i = 0;i<TrackDatabase.REF.tracks.Count;i++) {
				if(TrackDatabase.REF.tracks[i].canUseInDivision(this.divisionNumber)) {
					allTracks.Add(TrackDatabase.REF.tracks[i]);
				}
			}
			allTracks.Sort(randTrackSort);
			int dayOfNextSunday = ChampionshipSeason.ACTIVE_SEASON.secondsPast+1;
			DateTime theDate = new DateTime( 2015, 12, 28 ).AddDays( dayOfNextSunday );
			while(!theDate.ToLongDateString().ToLower().Contains("sunday")) {
				dayOfNextSunday++;
				theDate = new DateTime( 2015, 12, 28 ).AddDays( dayOfNextSunday );
			}
			for(int i = 0;i<allTracks.Count&&i<MAX_RACES_IN_SEASON;i++) {
				ChampionshipRaceSettings race = new ChampionshipRaceSettings();
				race.setupDefaultsForLeague(divisionNumber,dayOfNextSunday,allTracks[i]);
				
				races.Add(race);
				dayOfNextSunday += 14;
				
			} 

		}
		public bool humanLeague {
			get {
				for(int i = 0;i<teams.Count;i++) {
					if(teams[i].humanControlled) {
						return true;
					}
				}
				return false;
			}
		}

		public int positionForTeamInChampionship(GTTeam aTeam) {
			int lastPosition = -1;
			int lastPoints = -1;
			int lastWins = -1;

			teams.Sort(sortOnChampsPoints);
			for(int i = 0;i<teams.Count;i++) {
				if(lastPosition==-1) {
					lastPosition = 0;
					lastPoints = teams[i].seasonPoints;
					lastWins = teams[i].seasonWins;
				} else {
					if(teams[i].seasonPoints==lastPoints&&teams[i].seasonWins==lastWins) {

					} else {
						lastPosition++;
					}
				}
				if(teams[i]==aTeam) {
					return lastPosition;
				}
			}
			return 0;
		}

		public List<GTTeam> sortedTeams {
			get {
				teams.Sort(sortOnChampsPoints);
				return teams;
			}
		}

		public List<GTDriver> driversChampionshipPositions() {
			//TODO So far no grid setup is acknowledged.
			List<GTDriver> ret = new List<GTDriver>();
			for(int i = 0;i<this.teams.Count;i++) {
				ret.Add(teams[i].drivers[0]);
				ret.Add(teams[i].drivers[1]); 
			}
			ret.Sort(ChampionshipSeasonBase.SortByChampionshipPoints);
			return ret;
		}


		public int sortOnChampsPoints(GTTeam aTeam1,GTTeam aTeam2) {
			if(aTeam1.seasonPoints>aTeam2.seasonPoints) {
				return -1;
			} else if(aTeam2.seasonPoints>aTeam1.seasonPoints) {
				return 1;
			} else if(aTeam1.seasonWins>aTeam2.seasonWins) {
				return -1;
			} else if(aTeam2.seasonWins>aTeam1.seasonWins) {
				return 1;
			} else {
				return 0;
			}
		}

		public TrackDatabaseRecord eventOnDay(int aDay) {
			for(int i=0;i<this.races.Count;i++) {
				if(this.races[i].startDate==aDay) {
					return this.races[i].track;
				}
			}
			return null;
		}
		public void initNextRace() {
			bool foundNextRace = false;

			ChampionshipRaceSettings nextRace = null;
			for(int i = 0;i<races.Count;i++) {
				
				int ticksTillThisRace = races[i].startDate-ChampionshipSeason.ACTIVE_SEASON.secondsPast;
				if(ticksTillThisRace>=0&&!foundNextRace) {
					if(races[i].teamsInRace==null||races[i].teamsInRace.Count==0) {
						races[i].teamsInRace = teams;
					}
					nextRace = races[i];
					foundNextRace = true;
				}
				
			}
			ChampionshipSeason.ACTIVE_SEASON.nextRace = nextRace;
		}
		public void doTick(int aCurrentTick) {
			bool foundNextRace = false;
			
			ChampionshipRaceSettings nextRace = null;
			for(int i = 0;i<races.Count;i++) {
				
				int ticksTillThisRace = races[i].startDate-aCurrentTick;
				if(ticksTillThisRace>=0&&!foundNextRace) {
					if(races[i].teamsInRace==null||races[i].teamsInRace.Count==0) {
						races[i].teamsInRace = teams;
					}
					nextRace = races[i];
					foundNextRace = true;
				}
				if(races[i].startDate==aCurrentTick) {
					
				}
				
			}

			for(int i = 0;i<this.teams.Count;i++) {
				teams[i].doTick(aCurrentTick);
			}

			if(humanLeague) {
				ChampionshipSeason.ACTIVE_SEASON.nextRace = nextRace;
				
				if(nextRace!=null) {
					
					int nextRaceStartDate = nextRace.startDate;
					int ticksTillNextRace = nextRaceStartDate -aCurrentTick;
					Debug.Log("Ticks till next race: "+ticksTillNextRace);
				}
				if(!raceOrEventBeforeRaceOrSincePastRace(aCurrentTick)) {
					createRandomEvent(aCurrentTick+1);
				}
				RandomEvent r = this.getRandomEventOnDay(aCurrentTick);
				if(r!=null) { 
					ChampionshipSeason.ACTIVE_SEASON.allowTimeToPass = false;
					r.initLua();
					GarageManager.REF.doConversation(r.startConversation);

				}
			}
			
		}

		public bool giveResearchToAllTeams(GTEquippedResearch aItem) {
			bool r = false;
			for(int i = 0;i<this.teams.Count;i++) {
				if(teams[i].addResearchToTeam(aItem)) {
					r = true;
				}
			}
			return r;
		}
		public RandomEvent getRandomEventOnDay(int aDay) {
			for(int i = 0;i<randomEvents.Count;i++) {
				if(randomEvents[i].date==aDay) {
					return randomEvents[i];
				}
			}
			return null;
		}
		public RandomEvent getRandomEventCompletingOnDay(int aDay) {
			for(int i = 0;i<randomEvents.Count;i++) {
				if(randomEvents[i].targetDate==aDay) {
					return randomEvents[i];
				}
			}
			return null;
		}
		public void createRandomEvent(int aDay) {
			RandomEvent r = new RandomEvent(aDay);
			if(!r.failed)
				this.randomEvents.Add(r);
		}
		public bool raceOrEventBeforeRaceOrSincePastRace(int aDay) {
			if(ChampionshipSeason.ACTIVE_SEASON.nextRace==null) {
				return false;
			}
			int dayOfNextRace = ChampionshipSeason.ACTIVE_SEASON.nextRace.startDate;
			for(int i = aDay+1;i<dayOfNextRace;i++) {
				if(raceOrEventOnDay(i)) {
					return true;
				}
			}
			GTTeam myTeam = ChampionshipSeason.ACTIVE_SEASON.getUsersTeam();
			if(myTeam.hasResearchCompletingOnDay(aDay+1)) {
				return true;
			}
			while(aDay>=0) {
				if(raceOrEventOnDay(aDay)) {
					return true;
				}
				aDay--;
			}


			return false;
		}

		public bool raceOrEventOnDay(int aDay) {
			for(int i = 0;i<races.Count;i++) {
				if(races[i].startDate==aDay) {
					return true;	
				}
			}
			for(int i = 0;i<this.randomEvents.Count;i++) {
				if(randomEvents[i].date == aDay) {
					return true;
				}		 
			}
			return false;
		}
	}	
}

