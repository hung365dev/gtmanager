// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Teams;
using Drivers;
using Cars;
using PixelCrushers.DialogueSystem;


namespace championship
{
	public class ChampionshipSeasonBase : MonoBehaviour
	{
		public List<ChampionshipSeasonLeague> leagues = new List<ChampionshipSeasonLeague>();
		public int secondsPast;
		public int season = 1;
		public bool allowTimeToPass = false;
		private float _lastUpdate;
		public ChampionshipSeasonBase ()
		{
		}

		public void Start() {
			DontDestroyOnLoad(this);
			_lastUpdate = Time.time;
		}

		public string SaveString() {
			string s = "";
			s+=secondsPast+"|";
			for(int i = 0;i<leagues.Count;i++) { 
				s+=leagues[i].SaveString ()+"|";
			}
			s+="%";   
			for(int i = 0;i<GTDriver.allDrivers.Count;i++) {
				if(this.getTeamFromDriver(GTDriver.allDrivers[i])==null) {
					s+=GTDriver.allDrivers[i].SaveString()+"|";
				}
			}
			return s;
		}
		public void FromString(string aString) {
			GTDriver.allDrivers = new List<GTDriver>();
			ChampionshipSeason.ACTIVE_SEASON = (ChampionshipSeason) this;
			string[] split1 = aString.Split (new char[] {'%'});
			aString = split1[0];
			string[] split = aString.Split (new char[] {'|'});
			if(split.Length>1) {
				ChampionshipSeason.ACTIVE_SEASON.secondsPast = Convert.ToInt32(split[0]);
			}
			for(int i = 1;i<split.Length;i++) {
				ChampionshipSeasonLeague l = new ChampionshipSeasonLeague();
				if(split[i].Length>10) {
					l.FromString(split[i]);
					leagues.Add(l);
				}
			}
			split = split1[1].Split (new char[] {'|'});
			for(int i = 0;i<split.Length;i++) {
				if(split[i].Length>10) {
					GTDriver d = new GTDriver();
					d.FromString(split[i]);
				}
				
			}
			for(int i = 0;i<leagues.Count;i++) {
				leagues[i].postInit();
			}

			for(int i = 0;i<GTDriver.allDrivers.Count;i++) {
				GTDriver.allDrivers[i].initContract();
			}
		}
		public void handleRelegationsAndPromotions() {
			bool conversationTriggered = false;
			for(int i = 0;i<leagues.Count;i++) {
				GTTeam relegatedTeam = leagues[i].relegatedTeam;
	
				if(relegatedTeam==this.getUsersTeam()) {
					switch(i) {
				//		case(3):DialogueLua.SetVariable("EndSeasonResult","RelegatedDivision4");break;
						case(2):DialogueLua.SetVariable("EndSeasonResult","RelegatedDivision3");break;
						case(1):DialogueLua.SetVariable("EndSeasonResult","RelegatedDivision2");break;
						case(0):DialogueLua.SetVariable("EndSeasonResult","RelegatedDivision1");break;
					}
					conversationTriggered = true;
				} else {
					relegatedTeam.buyCarForDivision(i+1);
				}
				if(relegatedTeam!=null) {
					leagues[i+1].addTeam(relegatedTeam);
					leagues[i].removeTeam(relegatedTeam);
				} 
				GTTeam promotedTeam = leagues[i].promotedTeam;
				if(promotedTeam==this.getUsersTeam()) {
					switch(i) {
						case(3):DialogueLua.SetVariable("EndSeasonResult","PromotedDivision4");break;
						case(2):DialogueLua.SetVariable("EndSeasonResult","PromotedDivision3");break;
						case(1):DialogueLua.SetVariable("EndSeasonResult","PromotedDivision2");break;
					}
					conversationTriggered = true;
					GarageManager.REF.enableFireworks();
				} else {
					promotedTeam.buyCarForDivision(i-1);
				}

				if(promotedTeam!=null) {
					leagues[i-1].addTeam(promotedTeam);
					leagues[i].removeTeam(promotedTeam);
				}
			}
			for(int i = 0;i<leagues.Count;i++) {
				leagues[i].initRaces();
			}
			if(!conversationTriggered) {
				DialogueLua.SetVariable("EndSeasonResult","NoChange");
			}
			
			GarageManager.REF.doConversation("EndSeasonResult");
			season++;
		}
		public GTTeam getTeamFromCar(GTCar aCar) {
			for(int i = 0;i<leagues.Count;i++) {
				GTTeam team = leagues[i].getTeamFromCar(aCar);
				if(team!=null) {
					return team;  
				}
			}
			return null;
		}
		public GTTeam getUsersTeam() {
			for(int i = 0;i<leagues.Count;i++) {
				GTTeam team = leagues[i].getUsersTeam();
				if(team!=null) {
					return team;
				}
			}
			return null;
		}
		
		public ChampionshipSeasonLeague leagueForTeam(GTTeam aTeam) {
			for(int i = 0;i<leagues.Count;i++) {
				if(leagues[i].hasTeam(aTeam)!=null) {
					return leagues[i];
				}
			}
			return leagues[0];
		}
		public GTTeam getTeamFromDriver(GTDriver aDriver) {
			for(int i = 0;i<leagues.Count;i++) {
				GTTeam team = leagues[i].getTeamFromDriver(aDriver);
				if(team!=null) {
					return team;
				}
			}
			return null;
		}
		public virtual void Update() {
			if(Time.time-_lastUpdate>1f) {
				_lastUpdate = Time.time;
				if(allowTimeToPass) {
					secondsPast++;
					for(int i = 0;i<leagues.Count;i++) {
						leagues[i].doTick(secondsPast);
					}
					
					GameObject go = GameObject.Find("GarageManager");
					if(go!=null) {
						go.GetComponent<GarageManager>().UpdateDisplay();
					}

					go = GameObject.Find ("CalendarContainer");
					if(go!=null) {
						CalendarManager cm = go.GetComponent<CalendarManager>();
						cm.updateDay();
					}
					ChampionshipSeason.ACTIVE_SEASON.SaveGame();
				}
			}
		}

		public string dateString(int aDay) {
			DateTime theDate = new DateTime( 2015, 12, 28 ).AddDays( aDay );
			return theDate.ToShortDateString();
		}

		public ChampionshipSeasonLeague seasonForTeam(GTTeam aTeam) {
			for(int i = 0;i<leagues.Count;i++) {
				if(leagues[i].hasTeam(aTeam)!=null) {
					return leagues[i];
				}
			}
			return null;
		}
		public ChampionshipSeasonLeague seasonForLeague(int aLeague) {
			for(int i = 0;i<leagues.Count;i++) {
				if(leagues[i].divisionNumber==aLeague) {
					return leagues[i];
				}
			}
			ChampionshipSeasonLeague newLeague = new ChampionshipSeasonLeague();
			newLeague.divisionNumber = aLeague;
			newLeague.initRaces();
			leagues.Add(newLeague);
			return newLeague;
		}

		public IEnumerator LoadLevel(string aLevelName,string aLoadText) {
			SplashScreen.levelToLoad = aLevelName;
			SplashScreen.levelLoadText = aLoadText;
			Application.LoadLevel("SplashScreen");
			yield return null;

		}

		public static int SortByChampionshipPoints(GTDriver aDriver1,GTDriver aDriver2) {
			if(aDriver1.championshipPoints<aDriver2.championshipPoints) {
				return 1;
			} if(aDriver1.championshipPoints>aDriver2.championshipPoints) {
				return -1;
			} else if(aDriver1.lastRacePoints>aDriver2.lastRacePoints) {
				return -1;
			} else if(aDriver1.lastRacePoints<aDriver2.lastRacePoints) {
				return 1;
			} else {
				return 0;
			}
		}

	}
}

